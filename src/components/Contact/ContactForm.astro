---
// src/components/ContactForm.astro
const { id = "ContactForm", source = "" } = Astro.props;
---

<form id={id} action="https://jsmcleaning.up.railway.app/" class="space-y-6">
  <!-- Honeypot -->
  <div class="hidden">
    <label for="website">Website</label>
    <input type="text" id="website" name="website" />
  </div>

  <!-- Contact Details -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="flex gap-2">
      <input
        type="text"
        id="firstName"
        name="firstName"
        placeholder="First Name"
        required
        class="w-full border border-text_gray rounded-md px-4 py-2"
      />
      <input
        type="text"
        id="lastName"
        name="lastName"
        placeholder="Last Name"
        required
        class="w-full border border-text_gray rounded-md px-4 py-2"
      />
    </div>
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Email"
      required
      class="w-full border border-text_gray rounded-md px-4 py-2 md:col-span-2"
    />
    <input
      type="tel"
      id="phone"
      name="phone"
      placeholder="Phone"
      required
      class="w-full border border-text_gray rounded-md px-4 py-2 md:col-span-2"
    />
  </div>

  <input
    type="text"
    id="subject"
    name="subject"
    placeholder="subject"
    required
    class="w-full border border-text_gray rounded-md px-4 py-2"
  />

  <!-- Message -->
  <textarea
    id="message"
    name="message"
    rows="4"
    placeholder="Please provide as much information as you can (optional)"
    class="w-full border border-text_gray rounded-md px-4 py-2"></textarea>

  <!-- Consent -->
  <div class="mb-4">
    <label class="flex items-center">
      <input
        type="checkbox"
        id="consent"
        name="consent"
        required
        class="form-checkbox h-4 w-4 text-primary rounded"
      />
      <span class="ml-2 text-gray-700 text-sm"
        >I agree to receive email or SMS.</span
      >
    </label>
  </div>

  <!-- Submit -->
  <button
    type="submit"
    class="w-full bg-primary text-white font-semibold py-3 px-6 rounded-md hover:bg-dark transition"
  >
    Send Request
  </button>

  <p id="result" class="text-center text-sm text-gray-500 mt-4"></p>
  <input type="hidden" name="formSource" value={source} />
</form>

<!-- Modal para reCAPTCHA -->
<div
  id="recaptchaModal"
  class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-50"
>
  <div class="bg-white p-6 rounded shadow-lg relative w-fit">
    <button
      id="closeModal"
      class="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
      >&times;</button
    >
    <div id="recaptcha-container"></div>
  </div>
</div>

<!-- Scripts -->
<script
  src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit"
  async
  defer></script>

<!-- define:vars injeta a prop `id` no client-side JS -->
<script define:vars={{ id }}>
  let recaptchaWidgetId;
  let isRendered = false;

  function onloadCallback() {
    if (!isRendered) renderRecaptcha();
  }

  function renderRecaptcha() {
    recaptchaWidgetId = grecaptcha.render("recaptcha-container", {
      sitekey: "6LfnqH8rAAAAAKbtGQX8cjjl8oXGmo0STQOBnVW7",
      callback: onReCaptchaSuccess,
    });
    isRendered = true;
  }

  function onReCaptchaSuccess(token) {
    const form = document.getElementById(id);
    const result = document.getElementById("result");
    const modal = document.getElementById("recaptchaModal");
    if (!form || !result) return;

    const data = new FormData(form);
    data.append("g-recaptcha-response", token);

    result.style.display = "block";
    result.textContent = "Sending...";
    result.className = "text-center text-sm text-gray-500 mt-4";

    fetch(form.action, {
      method: "POST",
      headers: { Authorization: "Bearer 5yEp7tdDOBWVkEx4GAbReVFv65yL26" },
      body: data,
    })
      .then(async (res) => {
        if (res.ok) {
          result.textContent = "Form sent successfully!";
          result.className = "text-center text-sm text-green-500 mt-4";
          form.reset();
        } else {
          const txt = await res.text();
          result.textContent = "Error sending form: " + txt;
          result.className = "text-center text-sm text-red-500 mt-4";
        }
      })
      .catch(() => {
        result.textContent = "Network error.";
        result.className = "text-center text-sm text-red-500 mt-4";
      })
      .finally(() => {
        modal.classList.add("hidden");
        grecaptcha.reset(recaptchaWidgetId);
        setTimeout(() => (result.style.display = "none"), 5000);
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById(id);
    const phone = document.getElementById("phone");
    const zip = document.getElementById("zipCode");
    const consent = document.getElementById("consent");
    const modal = document.getElementById("recaptchaModal");
    const closeBtn = document.getElementById("closeModal");
    if (!form || !phone || !zip || !consent) return;

    form.addEventListener("submit", (e) => {
      e.preventDefault();

      // Honeypot
      if (form.website && form.website.value) return;

      // Phone & ZIP validation
      const phonePattern =
        /^(\+1\s?)?(\([0-9]{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/;
      if (!phonePattern.test(phone.value.trim())) {
        alert("Invalid phone number.");
        return;
      }
      const zipPattern = /^[0-9]{5}(?:-[0-9]{4})?$/;
      if (!zipPattern.test(zip.value.trim())) {
        alert("Invalid ZIP code.");
        return;
      }
      if (!consent.checked) {
        alert("You must agree to receive email or SMS.");
        return;
      }

      // Show reCAPTCHA modal
      modal.classList.remove("hidden");
      setTimeout(renderRecaptcha, 100);
    });

    closeBtn.addEventListener("click", () => {
      modal.classList.add("hidden");
      if (isRendered) grecaptcha.reset(recaptchaWidgetId);
    });
  });
</script>
